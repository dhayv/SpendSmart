name: CI/CD Pipeline

on:
  push:  
    branches:
      - '**'  # Match all branches
  workflow_dispatch:  # Allows manual triggering of the workflow

jobs:
  lint:
    name: Lint Code Base
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5.1.0
        with:
          python-version: '3.11.8'

      - name: Cache pip
        uses: actions/cache@v4.0.2
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('backend/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install dependencies and linters
        run: |
          pip install isort black

      - name: Isort
        run: isort . --profile black

      - name: Format code with Black
        run: black .

      - name: Commit changes if needed
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add -A
          git diff --exit-code || git commit -m "Apply formatting"
          git push
        
      - name: Set up Environment for Super-Linter
        uses: actions/setup-node@v4.0.2

      - name: Run Super-Linter
        uses: super-linter/super-linter@v5.7.2
        env:
          DEFAULT_BRANCH: main
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          VALIDATE_PYTHON_MYPY: false
          VALIDATE_PYTHON_BLACK: false
        continue-on-error: true

  deploy:
    name: Deploy Code
    runs-on: ubuntu-latest
    needs: lint  # Ensure lint job completes first
    if: github.ref == 'refs/heads/main'  # Run this job only on the main branch

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Rsync and Deployments Action
        uses: easingthemes/ssh-deploy@v5.0.3
        with:
          SSH_PRIVATE_KEY: ${{ secrets.SSH_KEY }}
          REMOTE_HOST: ${{ secrets.EC2_ADDRESS }}
          REMOTE_USER: ubuntu
          SOURCE: "."
          TARGET: "~/app"
          ARGS: "-avz"
          EXCLUDE: "/node_modules/,/.git/,/.env/,/venv/,/__pycache__/,/db.sqlite3/,/Basic_Script/,/README.md/,/api.js/,/main.py/,/database.py/"
          SCRIPT_BEFORE: |
            ls
          SCRIPT_AFTER: |
            sudo systemctl stop frontend.service
            sudo systemctl stop backend-container.service
            cd ~/app/frontend
            npm install
            npm run build
            npm prune --production
            sudo systemctl restart backend-container.service
            sudo systemctl restart frontend.service
            sudo systemctl status backend-container.service
            sudo systemctl status frontend.service
